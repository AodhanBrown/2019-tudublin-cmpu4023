# source: http://localhost:4466
# timestamp: Sun Mar 17 2019 15:49:35 GMT+0000 (Greenwich Mean Time)

type AggregateCategories {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateProducts {
  count: Int!
}

type AggregateReorder {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Categories {
  category: Int
  categoryname: String!
  products: Products
}

"""A connection to a list of items."""
type CategoriesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoriesEdge]!
  aggregate: AggregateCategories!
}

input CategoriesCreateInput {
  category: Int
  categoryname: String!
  products: ProductsCreateOneWithoutCategoriesInput
}

input CategoriesCreateOneWithoutProductsInput {
  create: CategoriesCreateWithoutProductsInput
  connect: CategoriesWhereUniqueInput
}

input CategoriesCreateWithoutProductsInput {
  category: Int
  categoryname: String!
}

"""An edge in a connection."""
type CategoriesEdge {
  """The item at the end of the edge."""
  node: Categories!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoriesOrderByInput {
  category_ASC
  category_DESC
  categoryname_ASC
  categoryname_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoriesPreviousValues {
  category: Int
  categoryname: String!
}

type CategoriesSubscriptionPayload {
  mutation: MutationType!
  node: Categories
  updatedFields: [String!]
  previousValues: CategoriesPreviousValues
}

input CategoriesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoriesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoriesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoriesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoriesWhereInput
}

input CategoriesUpdateInput {
  category: Int
  categoryname: String
  products: ProductsUpdateOneWithoutCategoriesInput
}

input CategoriesUpdateManyMutationInput {
  category: Int
  categoryname: String
}

input CategoriesUpdateOneWithoutProductsInput {
  create: CategoriesCreateWithoutProductsInput
  connect: CategoriesWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CategoriesUpdateWithoutProductsDataInput
  upsert: CategoriesUpsertWithoutProductsInput
}

input CategoriesUpdateWithoutProductsDataInput {
  category: Int
  categoryname: String
}

input CategoriesUpsertWithoutProductsInput {
  update: CategoriesUpdateWithoutProductsDataInput!
  create: CategoriesCreateWithoutProductsInput!
}

input CategoriesWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoriesWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoriesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoriesWhereInput!]
  category: Int

  """All values that are not equal to given value."""
  category_not: Int

  """All values that are contained in given list."""
  category_in: [Int!]

  """All values that are not contained in given list."""
  category_not_in: [Int!]

  """All values less than the given value."""
  category_lt: Int

  """All values less than or equal the given value."""
  category_lte: Int

  """All values greater than the given value."""
  category_gt: Int

  """All values greater than or equal the given value."""
  category_gte: Int
  categoryname: String

  """All values that are not equal to given value."""
  categoryname_not: String

  """All values that are contained in given list."""
  categoryname_in: [String!]

  """All values that are not contained in given list."""
  categoryname_not_in: [String!]

  """All values less than the given value."""
  categoryname_lt: String

  """All values less than or equal the given value."""
  categoryname_lte: String

  """All values greater than the given value."""
  categoryname_gt: String

  """All values greater than or equal the given value."""
  categoryname_gte: String

  """All values containing the given string."""
  categoryname_contains: String

  """All values not containing the given string."""
  categoryname_not_contains: String

  """All values starting with the given string."""
  categoryname_starts_with: String

  """All values not starting with the given string."""
  categoryname_not_starts_with: String

  """All values ending with the given string."""
  categoryname_ends_with: String

  """All values not ending with the given string."""
  categoryname_not_ends_with: String
  products: ProductsWhereInput
}

input CategoriesWhereUniqueInput {
  category: Int
}

scalar DateTime

type Inventory {
  prod_id: Int!
  quan_in_stock: Int!
  sales: Int!
  products: Products
}

"""A connection to a list of items."""
type InventoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  prod_id: Int!
  quan_in_stock: Int!
  sales: Int!
  products: ProductsCreateOneWithoutInventoryInput
}

input InventoryCreateOneWithoutProductsInput {
  create: InventoryCreateWithoutProductsInput
  connect: InventoryWhereUniqueInput
}

input InventoryCreateWithoutProductsInput {
  prod_id: Int!
  quan_in_stock: Int!
  sales: Int!
}

"""An edge in a connection."""
type InventoryEdge {
  """The item at the end of the edge."""
  node: Inventory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InventoryOrderByInput {
  prod_id_ASC
  prod_id_DESC
  quan_in_stock_ASC
  quan_in_stock_DESC
  sales_ASC
  sales_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InventoryPreviousValues {
  prod_id: Int!
  quan_in_stock: Int!
  sales: Int!
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InventorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InventorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InventorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
}

input InventoryUpdateInput {
  prod_id: Int
  quan_in_stock: Int
  sales: Int
  products: ProductsUpdateOneWithoutInventoryInput
}

input InventoryUpdateManyMutationInput {
  prod_id: Int
  quan_in_stock: Int
  sales: Int
}

input InventoryUpdateOneWithoutProductsInput {
  create: InventoryCreateWithoutProductsInput
  connect: InventoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InventoryUpdateWithoutProductsDataInput
  upsert: InventoryUpsertWithoutProductsInput
}

input InventoryUpdateWithoutProductsDataInput {
  prod_id: Int
  quan_in_stock: Int
  sales: Int
}

input InventoryUpsertWithoutProductsInput {
  update: InventoryUpdateWithoutProductsDataInput!
  create: InventoryCreateWithoutProductsInput!
}

input InventoryWhereInput {
  """Logical AND on all given filters."""
  AND: [InventoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [InventoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InventoryWhereInput!]
  prod_id: Int

  """All values that are not equal to given value."""
  prod_id_not: Int

  """All values that are contained in given list."""
  prod_id_in: [Int!]

  """All values that are not contained in given list."""
  prod_id_not_in: [Int!]

  """All values less than the given value."""
  prod_id_lt: Int

  """All values less than or equal the given value."""
  prod_id_lte: Int

  """All values greater than the given value."""
  prod_id_gt: Int

  """All values greater than or equal the given value."""
  prod_id_gte: Int
  quan_in_stock: Int

  """All values that are not equal to given value."""
  quan_in_stock_not: Int

  """All values that are contained in given list."""
  quan_in_stock_in: [Int!]

  """All values that are not contained in given list."""
  quan_in_stock_not_in: [Int!]

  """All values less than the given value."""
  quan_in_stock_lt: Int

  """All values less than or equal the given value."""
  quan_in_stock_lte: Int

  """All values greater than the given value."""
  quan_in_stock_gt: Int

  """All values greater than or equal the given value."""
  quan_in_stock_gte: Int
  sales: Int

  """All values that are not equal to given value."""
  sales_not: Int

  """All values that are contained in given list."""
  sales_in: [Int!]

  """All values that are not contained in given list."""
  sales_not_in: [Int!]

  """All values less than the given value."""
  sales_lt: Int

  """All values less than or equal the given value."""
  sales_lte: Int

  """All values greater than the given value."""
  sales_gt: Int

  """All values greater than or equal the given value."""
  sales_gte: Int
  products: ProductsWhereInput
}

input InventoryWhereUniqueInput {
  prod_id: Int
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProducts(data: ProductsCreateInput!): Products!
  createReorder(data: ReorderCreateInput!): Reorder!
  createInventory(data: InventoryCreateInput!): Inventory!
  createCategories(data: CategoriesCreateInput!): Categories!
  updateProducts(data: ProductsUpdateInput!, where: ProductsWhereUniqueInput!): Products
  updateReorder(data: ReorderUpdateInput!, where: ReorderWhereUniqueInput!): Reorder
  updateInventory(data: InventoryUpdateInput!, where: InventoryWhereUniqueInput!): Inventory
  updateCategories(data: CategoriesUpdateInput!, where: CategoriesWhereUniqueInput!): Categories
  deleteProducts(where: ProductsWhereUniqueInput!): Products
  deleteReorder(where: ReorderWhereUniqueInput!): Reorder
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteCategories(where: CategoriesWhereUniqueInput!): Categories
  upsertProducts(where: ProductsWhereUniqueInput!, create: ProductsCreateInput!, update: ProductsUpdateInput!): Products!
  upsertReorder(where: ReorderWhereUniqueInput!, create: ReorderCreateInput!, update: ReorderUpdateInput!): Reorder!
  upsertInventory(where: InventoryWhereUniqueInput!, create: InventoryCreateInput!, update: InventoryUpdateInput!): Inventory!
  upsertCategories(where: CategoriesWhereUniqueInput!, create: CategoriesCreateInput!, update: CategoriesUpdateInput!): Categories!
  updateManyProductses(data: ProductsUpdateManyMutationInput!, where: ProductsWhereInput): BatchPayload!
  updateManyReorders(data: ReorderUpdateManyMutationInput!, where: ReorderWhereInput): BatchPayload!
  updateManyInventories(data: InventoryUpdateManyMutationInput!, where: InventoryWhereInput): BatchPayload!
  updateManyCategorieses(data: CategoriesUpdateManyMutationInput!, where: CategoriesWhereInput): BatchPayload!
  deleteManyProductses(where: ProductsWhereInput): BatchPayload!
  deleteManyReorders(where: ReorderWhereInput): BatchPayload!
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  deleteManyCategorieses(where: CategoriesWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Products {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  reorder: Reorder
  inventory: Inventory
  categories: Categories
}

"""A connection to a list of items."""
type ProductsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductsEdge]!
  aggregate: AggregateProducts!
}

input ProductsCreateInput {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  reorder: ReorderCreateOneWithoutProductsInput
  inventory: InventoryCreateOneWithoutProductsInput
  categories: CategoriesCreateOneWithoutProductsInput
}

input ProductsCreateOneWithoutCategoriesInput {
  create: ProductsCreateWithoutCategoriesInput
  connect: ProductsWhereUniqueInput
}

input ProductsCreateOneWithoutInventoryInput {
  create: ProductsCreateWithoutInventoryInput
  connect: ProductsWhereUniqueInput
}

input ProductsCreateOneWithoutReorderInput {
  create: ProductsCreateWithoutReorderInput
  connect: ProductsWhereUniqueInput
}

input ProductsCreateWithoutCategoriesInput {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  reorder: ReorderCreateOneWithoutProductsInput
  inventory: InventoryCreateOneWithoutProductsInput
}

input ProductsCreateWithoutInventoryInput {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  reorder: ReorderCreateOneWithoutProductsInput
  categories: CategoriesCreateOneWithoutProductsInput
}

input ProductsCreateWithoutReorderInput {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
  inventory: InventoryCreateOneWithoutProductsInput
  categories: CategoriesCreateOneWithoutProductsInput
}

"""An edge in a connection."""
type ProductsEdge {
  """The item at the end of the edge."""
  node: Products!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductsOrderByInput {
  prod_id_ASC
  prod_id_DESC
  category_ASC
  category_DESC
  title_ASC
  title_DESC
  actor_ASC
  actor_DESC
  price_ASC
  price_DESC
  special_ASC
  special_DESC
  common_prod_id_ASC
  common_prod_id_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductsPreviousValues {
  prod_id: Int!
  category: Int!
  title: String!
  actor: String!
  price: Float!
  special: Int!
  common_prod_id: Int!
}

type ProductsSubscriptionPayload {
  mutation: MutationType!
  node: Products
  updatedFields: [String!]
  previousValues: ProductsPreviousValues
}

input ProductsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductsWhereInput
}

input ProductsUpdateInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
  reorder: ReorderUpdateOneWithoutProductsInput
  inventory: InventoryUpdateOneWithoutProductsInput
  categories: CategoriesUpdateOneWithoutProductsInput
}

input ProductsUpdateManyMutationInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
}

input ProductsUpdateOneWithoutCategoriesInput {
  create: ProductsCreateWithoutCategoriesInput
  connect: ProductsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductsUpdateWithoutCategoriesDataInput
  upsert: ProductsUpsertWithoutCategoriesInput
}

input ProductsUpdateOneWithoutInventoryInput {
  create: ProductsCreateWithoutInventoryInput
  connect: ProductsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductsUpdateWithoutInventoryDataInput
  upsert: ProductsUpsertWithoutInventoryInput
}

input ProductsUpdateOneWithoutReorderInput {
  create: ProductsCreateWithoutReorderInput
  connect: ProductsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductsUpdateWithoutReorderDataInput
  upsert: ProductsUpsertWithoutReorderInput
}

input ProductsUpdateWithoutCategoriesDataInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
  reorder: ReorderUpdateOneWithoutProductsInput
  inventory: InventoryUpdateOneWithoutProductsInput
}

input ProductsUpdateWithoutInventoryDataInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
  reorder: ReorderUpdateOneWithoutProductsInput
  categories: CategoriesUpdateOneWithoutProductsInput
}

input ProductsUpdateWithoutReorderDataInput {
  prod_id: Int
  category: Int
  title: String
  actor: String
  price: Float
  special: Int
  common_prod_id: Int
  inventory: InventoryUpdateOneWithoutProductsInput
  categories: CategoriesUpdateOneWithoutProductsInput
}

input ProductsUpsertWithoutCategoriesInput {
  update: ProductsUpdateWithoutCategoriesDataInput!
  create: ProductsCreateWithoutCategoriesInput!
}

input ProductsUpsertWithoutInventoryInput {
  update: ProductsUpdateWithoutInventoryDataInput!
  create: ProductsCreateWithoutInventoryInput!
}

input ProductsUpsertWithoutReorderInput {
  update: ProductsUpdateWithoutReorderDataInput!
  create: ProductsCreateWithoutReorderInput!
}

input ProductsWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductsWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductsWhereInput!]
  prod_id: Int

  """All values that are not equal to given value."""
  prod_id_not: Int

  """All values that are contained in given list."""
  prod_id_in: [Int!]

  """All values that are not contained in given list."""
  prod_id_not_in: [Int!]

  """All values less than the given value."""
  prod_id_lt: Int

  """All values less than or equal the given value."""
  prod_id_lte: Int

  """All values greater than the given value."""
  prod_id_gt: Int

  """All values greater than or equal the given value."""
  prod_id_gte: Int
  category: Int

  """All values that are not equal to given value."""
  category_not: Int

  """All values that are contained in given list."""
  category_in: [Int!]

  """All values that are not contained in given list."""
  category_not_in: [Int!]

  """All values less than the given value."""
  category_lt: Int

  """All values less than or equal the given value."""
  category_lte: Int

  """All values greater than the given value."""
  category_gt: Int

  """All values greater than or equal the given value."""
  category_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  actor: String

  """All values that are not equal to given value."""
  actor_not: String

  """All values that are contained in given list."""
  actor_in: [String!]

  """All values that are not contained in given list."""
  actor_not_in: [String!]

  """All values less than the given value."""
  actor_lt: String

  """All values less than or equal the given value."""
  actor_lte: String

  """All values greater than the given value."""
  actor_gt: String

  """All values greater than or equal the given value."""
  actor_gte: String

  """All values containing the given string."""
  actor_contains: String

  """All values not containing the given string."""
  actor_not_contains: String

  """All values starting with the given string."""
  actor_starts_with: String

  """All values not starting with the given string."""
  actor_not_starts_with: String

  """All values ending with the given string."""
  actor_ends_with: String

  """All values not ending with the given string."""
  actor_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  special: Int

  """All values that are not equal to given value."""
  special_not: Int

  """All values that are contained in given list."""
  special_in: [Int!]

  """All values that are not contained in given list."""
  special_not_in: [Int!]

  """All values less than the given value."""
  special_lt: Int

  """All values less than or equal the given value."""
  special_lte: Int

  """All values greater than the given value."""
  special_gt: Int

  """All values greater than or equal the given value."""
  special_gte: Int
  common_prod_id: Int

  """All values that are not equal to given value."""
  common_prod_id_not: Int

  """All values that are contained in given list."""
  common_prod_id_in: [Int!]

  """All values that are not contained in given list."""
  common_prod_id_not_in: [Int!]

  """All values less than the given value."""
  common_prod_id_lt: Int

  """All values less than or equal the given value."""
  common_prod_id_lte: Int

  """All values greater than the given value."""
  common_prod_id_gt: Int

  """All values greater than or equal the given value."""
  common_prod_id_gte: Int
  reorder: ReorderWhereInput
  inventory: InventoryWhereInput
  categories: CategoriesWhereInput
}

input ProductsWhereUniqueInput {
  prod_id: Int
}

type Query {
  productses(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Products]!
  reorders(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reorder]!
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  categorieses(where: CategoriesWhereInput, orderBy: CategoriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Categories]!
  products(where: ProductsWhereUniqueInput!): Products
  reorder(where: ReorderWhereUniqueInput!): Reorder
  inventory(where: InventoryWhereUniqueInput!): Inventory
  categories(where: CategoriesWhereUniqueInput!): Categories
  productsesConnection(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductsConnection!
  reordersConnection(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReorderConnection!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  categoriesesConnection(where: CategoriesWhereInput, orderBy: CategoriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoriesConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Reorder {
  prod_id: Int!
  date_low: DateTime!
  quan_low: Int!
  date_reordered: DateTime!
  quan_reordered: DateTime!
  date_expected: DateTime!
  products: Products
}

"""A connection to a list of items."""
type ReorderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReorderEdge]!
  aggregate: AggregateReorder!
}

input ReorderCreateInput {
  prod_id: Int!
  date_low: DateTime!
  quan_low: Int!
  date_reordered: DateTime!
  quan_reordered: DateTime!
  date_expected: DateTime!
  products: ProductsCreateOneWithoutReorderInput
}

input ReorderCreateOneWithoutProductsInput {
  create: ReorderCreateWithoutProductsInput
  connect: ReorderWhereUniqueInput
}

input ReorderCreateWithoutProductsInput {
  prod_id: Int!
  date_low: DateTime!
  quan_low: Int!
  date_reordered: DateTime!
  quan_reordered: DateTime!
  date_expected: DateTime!
}

"""An edge in a connection."""
type ReorderEdge {
  """The item at the end of the edge."""
  node: Reorder!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReorderOrderByInput {
  prod_id_ASC
  prod_id_DESC
  date_low_ASC
  date_low_DESC
  quan_low_ASC
  quan_low_DESC
  date_reordered_ASC
  date_reordered_DESC
  quan_reordered_ASC
  quan_reordered_DESC
  date_expected_ASC
  date_expected_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ReorderPreviousValues {
  prod_id: Int!
  date_low: DateTime!
  quan_low: Int!
  date_reordered: DateTime!
  quan_reordered: DateTime!
  date_expected: DateTime!
}

type ReorderSubscriptionPayload {
  mutation: MutationType!
  node: Reorder
  updatedFields: [String!]
  previousValues: ReorderPreviousValues
}

input ReorderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReorderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReorderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReorderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReorderWhereInput
}

input ReorderUpdateInput {
  prod_id: Int
  date_low: DateTime
  quan_low: Int
  date_reordered: DateTime
  quan_reordered: DateTime
  date_expected: DateTime
  products: ProductsUpdateOneWithoutReorderInput
}

input ReorderUpdateManyMutationInput {
  prod_id: Int
  date_low: DateTime
  quan_low: Int
  date_reordered: DateTime
  quan_reordered: DateTime
  date_expected: DateTime
}

input ReorderUpdateOneWithoutProductsInput {
  create: ReorderCreateWithoutProductsInput
  connect: ReorderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ReorderUpdateWithoutProductsDataInput
  upsert: ReorderUpsertWithoutProductsInput
}

input ReorderUpdateWithoutProductsDataInput {
  prod_id: Int
  date_low: DateTime
  quan_low: Int
  date_reordered: DateTime
  quan_reordered: DateTime
  date_expected: DateTime
}

input ReorderUpsertWithoutProductsInput {
  update: ReorderUpdateWithoutProductsDataInput!
  create: ReorderCreateWithoutProductsInput!
}

input ReorderWhereInput {
  """Logical AND on all given filters."""
  AND: [ReorderWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReorderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReorderWhereInput!]
  prod_id: Int

  """All values that are not equal to given value."""
  prod_id_not: Int

  """All values that are contained in given list."""
  prod_id_in: [Int!]

  """All values that are not contained in given list."""
  prod_id_not_in: [Int!]

  """All values less than the given value."""
  prod_id_lt: Int

  """All values less than or equal the given value."""
  prod_id_lte: Int

  """All values greater than the given value."""
  prod_id_gt: Int

  """All values greater than or equal the given value."""
  prod_id_gte: Int
  date_low: DateTime

  """All values that are not equal to given value."""
  date_low_not: DateTime

  """All values that are contained in given list."""
  date_low_in: [DateTime!]

  """All values that are not contained in given list."""
  date_low_not_in: [DateTime!]

  """All values less than the given value."""
  date_low_lt: DateTime

  """All values less than or equal the given value."""
  date_low_lte: DateTime

  """All values greater than the given value."""
  date_low_gt: DateTime

  """All values greater than or equal the given value."""
  date_low_gte: DateTime
  quan_low: Int

  """All values that are not equal to given value."""
  quan_low_not: Int

  """All values that are contained in given list."""
  quan_low_in: [Int!]

  """All values that are not contained in given list."""
  quan_low_not_in: [Int!]

  """All values less than the given value."""
  quan_low_lt: Int

  """All values less than or equal the given value."""
  quan_low_lte: Int

  """All values greater than the given value."""
  quan_low_gt: Int

  """All values greater than or equal the given value."""
  quan_low_gte: Int
  date_reordered: DateTime

  """All values that are not equal to given value."""
  date_reordered_not: DateTime

  """All values that are contained in given list."""
  date_reordered_in: [DateTime!]

  """All values that are not contained in given list."""
  date_reordered_not_in: [DateTime!]

  """All values less than the given value."""
  date_reordered_lt: DateTime

  """All values less than or equal the given value."""
  date_reordered_lte: DateTime

  """All values greater than the given value."""
  date_reordered_gt: DateTime

  """All values greater than or equal the given value."""
  date_reordered_gte: DateTime
  quan_reordered: DateTime

  """All values that are not equal to given value."""
  quan_reordered_not: DateTime

  """All values that are contained in given list."""
  quan_reordered_in: [DateTime!]

  """All values that are not contained in given list."""
  quan_reordered_not_in: [DateTime!]

  """All values less than the given value."""
  quan_reordered_lt: DateTime

  """All values less than or equal the given value."""
  quan_reordered_lte: DateTime

  """All values greater than the given value."""
  quan_reordered_gt: DateTime

  """All values greater than or equal the given value."""
  quan_reordered_gte: DateTime
  date_expected: DateTime

  """All values that are not equal to given value."""
  date_expected_not: DateTime

  """All values that are contained in given list."""
  date_expected_in: [DateTime!]

  """All values that are not contained in given list."""
  date_expected_not_in: [DateTime!]

  """All values less than the given value."""
  date_expected_lt: DateTime

  """All values less than or equal the given value."""
  date_expected_lte: DateTime

  """All values greater than the given value."""
  date_expected_gt: DateTime

  """All values greater than or equal the given value."""
  date_expected_gte: DateTime
  products: ProductsWhereInput
}

input ReorderWhereUniqueInput {
  prod_id: Int
}

type Subscription {
  products(where: ProductsSubscriptionWhereInput): ProductsSubscriptionPayload
  reorder(where: ReorderSubscriptionWhereInput): ReorderSubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  categories(where: CategoriesSubscriptionWhereInput): CategoriesSubscriptionPayload
}
